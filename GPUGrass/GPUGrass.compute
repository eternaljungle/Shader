#pragma kernel Init
#pragma kernel Tick

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

cbuffer Constants
{
    float4 RootColor;
    float4 TopColor;
    float4 ScaleParam;
    uint Capacity;
    float ScatterRange;
}

RWByteAddressBuffer CommandBuffer;
#include "./GPUGrassCommon.hlsl"

[numthreads(1, 1, 1)]
void Init()
{
    CommandBuffer.Store4(0, uint4(VERTEX_PER_BLADE * Capacity, 1, 0, 0));
}

[numthreads(64, 1, 1)]
void Tick(const uint id : SV_DispatchThreadID)
{
    if (id >= Capacity) { return; }

    Grass grass;
    const float x = mad(GenerateHashedRandomFloat(id + 0), ScatterRange, ScatterRange * 0.5f);
    const float z = mad(GenerateHashedRandomFloat(id + 2), ScatterRange, ScatterRange * 0.5f);
    grass.position = float3(x, 0.0f, z);

    grass.rotation = mad(GenerateHashedRandomFloat(id + 3), TWO_PI, -PI);
    grass.scale.x = mad(GenerateHashedRandomFloat(id + 4), ScaleParam.x, ScaleParam.y);
    grass.scale.y = mad(GenerateHashedRandomFloat(id + 5), ScaleParam.z, ScaleParam.w);
    grass.bend = GenerateHashedRandomFloat(id + 6);
    grass.colors = uint2(PackColor(RootColor), PackColor(TopColor));

    StoreGrass(grass, id);
}
