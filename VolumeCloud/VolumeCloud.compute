#pragma kernel VolumeCloud

cbuffer Consts
{
    uint Resolution;
}

uint PackColor(float4 color)
{
    color = saturate(color);
    return uint(color.a * 255.5f) << 24 | uint(color.b * 255.5f) << 16 | uint(color.g * 255.5f) << 8 | uint(color.r * 255.5f);
}

struct Ray
{
    float3 origin;
    float3 direction;
};

// HLSL-compatible hash, noise, fbm
// https://www.shadertoy.com/view/lss3zr 참고

float hash(float n) {
    return frac(sin(n) * 43758.5453);
}

float noise(float3 x) {
    float3 p = floor(x);
    float3 f = frac(x);
    f = f * f * (3.0 - 2.0 * f);

    float n = p.x + p.y * 57.0 + 113.0 * p.z;

    float res = lerp(
        lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
             lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
        lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
             lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);

    return res;
}


float fbm(float3 p) {
    float f = 0.0;
    f += 0.5000 * noise(p);      p *= 2.02;
    f += 0.2500 * noise(p);      p *= 2.03;
    f += 0.1250 * noise(p);      p *= 2.01;
    return f;
}

float SDFVolume(float3 p)
{
    float density = fbm(p * 3.0) - 0.5;
    return density;
}

float VolumeMarch(Ray ray)
{
    float t = 0.0f;
    float acc = 0.0f;
    for (int i = 0; i < 128; ++i)
    {
        float3 p = mad(ray.direction, t, ray.origin);
        float d = SDFVolume(p);
        if (d > 0.0f) { acc += d * 0.09f; }
        t += 0.01f;
    }
    return saturate(acc);
}

uniform float Angle;

RWByteAddressBuffer buffer;

[numthreads(8, 8, 1)]
void VolumeCloud(const uint2 id : SV_DispatchThreadID)
{
    if (id.x >= Resolution || id.y >= Resolution) { return; }

    float3 origin = float3(mad(float2(id.xy) / Resolution.xx, 2.0f, -1.0f), 0.0f);
    float3 forward = float3(0.0f, 0.0f, 1.0f);

    float2 sc;
    sincos(Angle, sc.x, sc.y);
    float2x2 rotations = float2x2(sc.x, sc.y, -sc.y, sc.x);
    origin.xz = mul(rotations, origin.xz);
    forward.xz = mul(rotations, forward.xz);
    
    Ray ray;
    ray.origin = origin;
    ray.direction = forward;
    const float t = VolumeMarch(ray);
    
    float4 color = float4(t, t, t, t);
    uint colorPacked = PackColor(color);
    buffer.Store(id.x + id.y * Resolution << 2, colorPacked);
}
