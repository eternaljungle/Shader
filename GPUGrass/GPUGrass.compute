#pragma kernel Init
#pragma kernel Tick

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "./GPUGrassCommon.hlsl"

cbuffer Constants
{
    uint Capacity;
    float ScatterRange;
    float2 XScaleParam;
    float2 YScaleParam;
    float4 RootColor;
    float4 TopColor;
}

RWByteAddressBuffer GrassBuffer;
RWByteAddressBuffer CommandBuffer;

[numthreads(1, 1, 1)]
void Init()
{
    CommandBuffer.Store4(0, uint4(VERTEX_PER_BLADE * Capacity, 1, 0, 0));
}

[numthreads(64, 1, 1)]
void Tick(const uint id : SV_DispatchThreadID)
{
    if (id >= Capacity) { return; }

    const float x = mad(GenerateHashedRandomFloat(id + 0), ScatterRange, ScatterRange * 0.5f);
    const float z = mad(GenerateHashedRandomFloat(id + 2), ScatterRange, ScatterRange * 0.5f);
    const float rotation = mad(GenerateHashedRandomFloat(id + 3), TWO_PI, -PI);
    const float scaleX = mad(GenerateHashedRandomFloat(id + 4), XScaleParam.x, XScaleParam.y);
    const float scaleY = mad(GenerateHashedRandomFloat(id + 5), YScaleParam.x, YScaleParam.y);
    const float bend = GenerateHashedRandomFloat(id + 6);

    uint rootColorPacked = PackColor(RootColor);
    uint topColorPacked = PackColor(TopColor);
    const uint2 colors = uint2(rootColorPacked, topColorPacked);
    
    GrassBuffer.Store4(mad(id, GRASS_BUFFER_SIZE, 0) << 2, asuint(float4(x, 0.0f, z, rotation)));
    GrassBuffer.Store2(mad(id, GRASS_BUFFER_SIZE, 4) << 2, asuint(float2(scaleX, scaleY)));
    GrassBuffer.Store(mad(id, GRASS_BUFFER_SIZE, 5) << 2, asuint(bend));
    GrassBuffer.Store2(mad(id, GRASS_BUFFER_SIZE, 7) << 2, asuint(colors));  
}